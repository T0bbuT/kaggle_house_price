次にやること…
・特徴量へのbox-coxを行う。まず訓練データについて行って、テストデータに対しても同じλで行う
    ・その際、どの特徴量についてbox-coxを行うかの基準が必要。top1%の人はskew>0.5。日本語の教材のやつは>0.75でやっていた

残りのやること
・数値変換
    ・対数変換(or box-cox)→標準化の順番でやるべし
    ・尖度・歪度については、自動で最適なパラメータを選択するオプションがあるはずなのでそれを使うべし

https://qiita.com/iamwalter88/items/f2f19120fb04ee7bc294
このコンペを題材にして、交差検証とoputunaの組み合わせについて書いている

疑問点：
・GarageYrBuiltについて、欠損(ガレージなし)を0で補完したがこれは正しかったのか？

===
流れ
- 取り敢えず何もせずにlightGBM
- 外れ値、特徴量エンジニアリング、パラメータチューニングによって試行錯誤
- 線形モデルを試してみる。そのために色々準備
    - 数値変換（目的変数、特徴量の両方）
    - 順位を考慮したカテゴリ変数のエンコーディング

===
苦労点・工夫点：
・特徴量について、外国の住宅特有の耳馴染みのない単語が多く、EDAや特徴量エンジニアリングをする際に苦戦した
　　・ポーチって何…？
・元データにて、"無い"ことを示すためにNoneとかNAとか入力してある部分が欠損として読み込まれてしまうの怖いなと思った
　　・あと、GarageYrBuiltの欠損をどうするべきかも悩んだ。そもそもガレージが無いとすると、何の数値をいれるべきか…うんと小さい数字、うんと大きい数字、それとも…
・プールに関しては、欠損にはなっていないものの99.69%がプールなしなので、分析には使えないと判断

===
Index(['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'Alley',
       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',
       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',
       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',
       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',
       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',
       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',
       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',
       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',
       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',
       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',
       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageYrBlt',
       'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond',
       'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',
       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal',
       'MoSold', 'YrSold', 'SaleType', 'SaleCondition', 'SalePrice'],
      dtype='object')


====

特徴量が多すぎて、それぞれの特徴量についてのグラフを見るだけで日が暮れちまうぞ…
うーん。なんだかこれでEDAが出来ている気がしないぞ…なんだかデータが多すぎて把握できている気がしない
どうすれば把握できているような気分になれる？

===
・まずデータを読み込んで何かをし始める前にできることはないか？？
　　・kaggleの説明ページを読み込む
・最初のEDAはどうしようか？
　　・目的変数の分布
・ipynbの管理？
・subplotsを使いこなせるようになりたいな
・データ説明を何度も確認できるようにしたいな。ファイルを

===
評価指標：予測をして、それに対数をかけて。教師データの方にも対数をかける。その後RMSEを計算


===
手順
・kaggleの説明ページを読み込む。イメージを深める
・ファイルを落として、読む
・

===
悩み
・試行錯誤の跡をどう残すか
    ・「元々こういった精度だったが、こういった工夫をすることで精度が向上した」というのを示したいが…
    ・ファイルを一度レポートとして残しておく？

工夫
・特徴量が膨大だし英語なので、ChatGPTに頼んで翻訳+表形式で出力してもらった
　　・そしてvscodeの拡張機能の"edit csv"をインストールして、vscode上で操作が完結するようにした
　　　　　・作業中ずっと右に表示しておきたいくらいだね
・ydata_profillingの利用
　　・マシンスペック、特にRAMが必要だけど…16GBじゃ足りない
　　　　　・minimalでも十分に事足りそうなのでOKか？
・notebookをどうやって書くか？
　　・一度lightGBMを適当に回して、今度は特徴量エンジニアリングとかやって、その次はパラメータチューニング・別のモデルとか使ってみようかと考えている。思考の流れに合わせたnotebookにするのか、それとも予め全てを知っていたかのようなnotebookにするべきか…